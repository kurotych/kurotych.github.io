[{"content":"Prerequirements You know how to setup and configure neovim plugins. You use UNIX-like OS Step-by-Step guide Install the next neovim plugins nvim-dap nvim-dap-ui -- Example with packer.nvim use(\u0026#34;mfussenegger/nvim-dap\u0026#34;) use { \u0026#34;rcarriga/nvim-dap-ui\u0026#34;, requires = {\u0026#34;mfussenegger/nvim-dap\u0026#34;} } Install vscode-lldb\nDownload file specific to your system https://github.com/vadimcn/vscode-lldb/releases Unpuck it by unzip utility. In my case I unpacked it to ~/Sources/lldb The result of execution unzip codelldb-x86_64-linux.vsix in ~/Sources/lldb: codelldb execution file is available by path: ~/Sources/lldb/extension/adapter Configure nvim-dap in your init.lua\n-- Update this path to yours! local extension_path = \u0026#39;~/Sources/lldb/extension/\u0026#39; local codelldb_path = extension_path .. \u0026#39;adapter/codelldb\u0026#39; local liblldb_path = extension_path .. \u0026#39;lldb/lib/liblldb.so\u0026#39; local dap = require(\u0026#34;dap\u0026#34;) dap.adapters.codelldb = { type = \u0026#39;server\u0026#39;, port = \u0026#34;${port}\u0026#34;, executable = { -- Change this to yours! command = \u0026#39;/home/kurotych/Sources/lldb/extension/adapter/codelldb\u0026#39;, args = {\u0026#34;--port\u0026#34;, \u0026#34;${port}\u0026#34;}, } } dap.configurations.rust= { { name = \u0026#34;Launch file\u0026#34;, type = \u0026#34;codelldb\u0026#34;, request = \u0026#34;launch\u0026#34;, program = function() return vim.fn.input(\u0026#39;Path to executable: \u0026#39;, vim.fn.getcwd() .. \u0026#39;/\u0026#39;, \u0026#39;file\u0026#39;) end, cwd = \u0026#39;${workspaceFolder}\u0026#39;, stopOnEntry = false, }, } require(\u0026#34;dapui\u0026#34;).setup({}) Open any rust program and execute in neovim command line :lua require(\u0026quot;dap\u0026quot;).toggle_breakpoint() where you can stop your program Screenshot Run :lua require(\u0026quot;dap\u0026quot;).continue() in neovim command line to start debugging\nScreenshot Run :lua require(\u0026quot;dapui\u0026quot;).open()\nScreenshot You can navigate through debug windows by mouse.\nExecte :lua require(\u0026quot;dapui\u0026quot;).open() - to close all windows Additional info You can find at plugins repositories nvim-dap and nvim-dap-ui\nP.S. I like the idea of float elements\nExample: :lua require(\u0026quot;dapui\u0026quot;).float_element('scopes', { enter = true })\nScreenshot ","permalink":"https://kurotych.com/posts/rust_neovim_debugger/","summary":"Prerequirements You know how to setup and configure neovim plugins. You use UNIX-like OS Step-by-Step guide Install the next neovim plugins nvim-dap nvim-dap-ui -- Example with packer.nvim use(\u0026#34;mfussenegger/nvim-dap\u0026#34;) use { \u0026#34;rcarriga/nvim-dap-ui\u0026#34;, requires = {\u0026#34;mfussenegger/nvim-dap\u0026#34;} } Install vscode-lldb\nDownload file specific to your system https://github.com/vadimcn/vscode-lldb/releases Unpuck it by unzip utility. In my case I unpacked it to ~/Sources/lldb The result of execution unzip codelldb-x86_64-linux.vsix in ~/Sources/lldb: codelldb execution file is available by path: ~/Sources/lldb/extension/adapter Configure nvim-dap in your init.","title":"Minimal Setup: Configuring Rust Debugger in Neovim"},{"content":"Technologies This site hosted by github pages and built by hugo plus hugo-PaperMod theme.\nHugo I choose Hugo because it\u0026rsquo;s fast, and I like the simplicity of filling the site content with Markdown. Having i18n out-of-box also a big advantage of this tool.\nGithub pages Provides ready to use CI/CD process. Which means my site automatically updates after commit pushed to repository.1\nCosts It costs my only price of domain kurotych.com\nHelpful links Hosting Hugo on Github GitHub Pages with Namecheap custom domain You need to have configured workflow in your repository. Check the gh-pages.yml\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://kurotych.com/posts/how-i-built-this-site1/","summary":"Technologies This site hosted by github pages and built by hugo plus hugo-PaperMod theme.\nHugo I choose Hugo because it\u0026rsquo;s fast, and I like the simplicity of filling the site content with Markdown. Having i18n out-of-box also a big advantage of this tool.\nGithub pages Provides ready to use CI/CD process. Which means my site automatically updates after commit pushed to repository.1\nCosts It costs my only price of domain kurotych.","title":"Tech description of this site"}]