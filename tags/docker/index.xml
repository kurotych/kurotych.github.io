<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Docker on Kurotych ðŸ‡ºðŸ‡¦</title><link>https://kurotych.com/tags/docker/</link><description>Recent content in Docker on Kurotych ðŸ‡ºðŸ‡¦</description><generator>Hugo -- 0.142.0</generator><language>en-us</language><lastBuildDate>Sun, 11 Feb 2024 13:09:33 +0200</lastBuildDate><atom:link href="https://kurotych.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Building and Deploying Rust Binaries Across Linux Distributions.</title><link>https://kurotych.com/posts/distributing-rust-binaries/</link><pubDate>Sun, 11 Feb 2024 13:09:33 +0200</pubDate><guid>https://kurotych.com/posts/distributing-rust-binaries/</guid><description>&lt;p>The Rust ecosystem has numerous platforms and extensive documentation to support cross-compilation features.&lt;/p>
&lt;p>But does it work as expected?&lt;/p>
&lt;p>Well, if your binary has few shared library dependencies,
then it likely will. Compiling for &lt;code>x86_64-unknown-linux-musl&lt;/code> significantly increases the likelihood that your binary will operate across different
Linux distributions.&lt;/p>
&lt;p>&lt;strong>However&lt;/strong>, the reality in production can be quite different.
We still encounter dependency hell, and many Rust crates rely on shared libraries that may have varying names and paths.&lt;/p></description></item></channel></rss>