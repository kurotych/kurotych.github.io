<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>rust on Kurotych ðŸ‡ºðŸ‡¦</title><link>https://kurotych.com/tags/rust/</link><description>Recent content in rust on Kurotych ðŸ‡ºðŸ‡¦</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 11 Feb 2024 13:09:33 +0200</lastBuildDate><atom:link href="https://kurotych.com/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Building and Deploying Rust Binaries Across Linux Distributions.</title><link>https://kurotych.com/posts/distributing-rust-binaries/</link><pubDate>Sun, 11 Feb 2024 13:09:33 +0200</pubDate><guid>https://kurotych.com/posts/distributing-rust-binaries/</guid><description>The Rust ecosystem has numerous platforms and extensive documentation to support cross-compilation features.
But does it work as expected?
Well, if your binary has few shared library dependencies, then it likely will. Compiling for x86_64-unknown-linux-musl significantly increases the likelihood that your binary will operate across different Linux distributions.
However, the reality in production can be quite different. We still encounter dependency hell, and many Rust crates rely on shared libraries that may have varying names and paths.</description></item><item><title>Minimal Setup: Configuring Rust Debugger in Neovim</title><link>https://kurotych.com/posts/rust_neovim_debugger/</link><pubDate>Mon, 20 Feb 2023 22:56:10 +0200</pubDate><guid>https://kurotych.com/posts/rust_neovim_debugger/</guid><description>Prerequirements You know how to setup and configure neovim plugins. You use UNIX-like OS Step-by-Step guide Install the next neovim plugins nvim-dap nvim-dap-ui -- Example with packer.nvim use(&amp;#34;mfussenegger/nvim-dap&amp;#34;) use { &amp;#34;rcarriga/nvim-dap-ui&amp;#34;, requires = {&amp;#34;mfussenegger/nvim-dap&amp;#34;} } Install vscode-lldb
Download file specific to your system https://github.com/vadimcn/vscode-lldb/releases Unpack it by unzip utility. In my case I unpacked it to ~/Sources/lldb The result of execution unzip codelldb-x86_64-linux.vsix in ~/Sources/lldb: codelldb execution file is available by path: ~/Sources/lldb/extension/adapter Configure nvim-dap in your init.</description></item></channel></rss>